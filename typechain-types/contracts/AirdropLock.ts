/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AirdropLock {
  export type AirdropInfoStruct = {
    amount: BigNumberish;
    claimedAmount: BigNumberish;
    lockupEndTimestamp: BigNumberish;
    claimed: boolean;
  };

  export type AirdropInfoStructOutput = [
    amount: bigint,
    claimedAmount: bigint,
    lockupEndTimestamp: bigint,
    claimed: boolean
  ] & {
    amount: bigint;
    claimedAmount: bigint;
    lockupEndTimestamp: bigint;
    claimed: boolean;
  };
}

export interface AirdropLockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "PERCENT_PRECISION"
      | "airdropIndex"
      | "airdropInfo"
      | "batchInsertAirdropData"
      | "claimAirdrop"
      | "claimLockup"
      | "closeAirdrop"
      | "dataLength"
      | "deleteAirdropData"
      | "endTimestamp"
      | "getAirdropInfo"
      | "grantRole"
      | "hasRole"
      | "immediateClaimPercentage"
      | "insertAirdropData"
      | "lockup"
      | "lockupPeriod"
      | "revokeRole"
      | "setEndTimestamp"
      | "setImmediateClaimPercentage"
      | "setLockupPeriod"
      | "setStartTimestamp"
      | "startTimestamp"
      | "token"
      | "totalAirdropAmount"
      | "updateAirdropData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropClaimed"
      | "AirdropClosed"
      | "Lockup"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchInsertAirdropData",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimLockup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAirdropData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "immediateClaimPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insertAirdropData",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setImmediateClaimPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAirdropAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAirdropData",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchInsertAirdropData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLockup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAirdropData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "immediateClaimPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertAirdropData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImmediateClaimPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAirdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAirdropData",
    data: BytesLike
  ): Result;
}

export namespace AirdropClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropClosedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockupEvent {
  export type InputTuple = [
    user: AddressLike,
    lockupEndTimestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, lockupEndTimestamp: bigint];
  export interface OutputObject {
    user: string;
    lockupEndTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, admin: string];
  export interface OutputObject {
    role: string;
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, admin: string];
  export interface OutputObject {
    role: string;
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirdropLock extends BaseContract {
  connect(runner?: ContractRunner | null): AirdropLock;
  waitForDeployment(): Promise<this>;

  interface: AirdropLockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PERCENT_PRECISION: TypedContractMethod<[], [bigint], "view">;

  airdropIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  airdropInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        amount: bigint;
        claimedAmount: bigint;
        lockupEndTimestamp: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  batchInsertAirdropData: TypedContractMethod<
    [receivers: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimAirdrop: TypedContractMethod<[], [void], "nonpayable">;

  claimLockup: TypedContractMethod<[], [void], "nonpayable">;

  closeAirdrop: TypedContractMethod<[], [void], "nonpayable">;

  dataLength: TypedContractMethod<[], [bigint], "view">;

  deleteAirdropData: TypedContractMethod<
    [receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  endTimestamp: TypedContractMethod<[], [bigint], "view">;

  getAirdropInfo: TypedContractMethod<
    [],
    [AirdropLock.AirdropInfoStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  immediateClaimPercentage: TypedContractMethod<[], [bigint], "view">;

  insertAirdropData: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockup: TypedContractMethod<[], [void], "nonpayable">;

  lockupPeriod: TypedContractMethod<[], [bigint], "view">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setEndTimestamp: TypedContractMethod<
    [_endTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setImmediateClaimPercentage: TypedContractMethod<
    [_immediateClaimPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLockupPeriod: TypedContractMethod<
    [_lockupPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStartTimestamp: TypedContractMethod<
    [_startTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  startTimestamp: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalAirdropAmount: TypedContractMethod<[], [bigint], "view">;

  updateAirdropData: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "airdropIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "airdropInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        amount: bigint;
        claimedAmount: bigint;
        lockupEndTimestamp: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchInsertAirdropData"
  ): TypedContractMethod<
    [receivers: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAirdrop"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimLockup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeAirdrop"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dataLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteAirdropData"
  ): TypedContractMethod<[receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAirdropInfo"
  ): TypedContractMethod<[], [AirdropLock.AirdropInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "immediateClaimPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "insertAirdropData"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockupPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEndTimestamp"
  ): TypedContractMethod<[_endTimestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setImmediateClaimPercentage"
  ): TypedContractMethod<
    [_immediateClaimPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLockupPeriod"
  ): TypedContractMethod<[_lockupPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStartTimestamp"
  ): TypedContractMethod<[_startTimestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAirdropAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateAirdropData"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AirdropClaimed"
  ): TypedContractEvent<
    AirdropClaimedEvent.InputTuple,
    AirdropClaimedEvent.OutputTuple,
    AirdropClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AirdropClosed"
  ): TypedContractEvent<
    AirdropClosedEvent.InputTuple,
    AirdropClosedEvent.OutputTuple,
    AirdropClosedEvent.OutputObject
  >;
  getEvent(
    key: "Lockup"
  ): TypedContractEvent<
    LockupEvent.InputTuple,
    LockupEvent.OutputTuple,
    LockupEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AirdropClaimed(address,uint256)": TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;
    AirdropClaimed: TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;

    "AirdropClosed()": TypedContractEvent<
      AirdropClosedEvent.InputTuple,
      AirdropClosedEvent.OutputTuple,
      AirdropClosedEvent.OutputObject
    >;
    AirdropClosed: TypedContractEvent<
      AirdropClosedEvent.InputTuple,
      AirdropClosedEvent.OutputTuple,
      AirdropClosedEvent.OutputObject
    >;

    "Lockup(address,uint256)": TypedContractEvent<
      LockupEvent.InputTuple,
      LockupEvent.OutputTuple,
      LockupEvent.OutputObject
    >;
    Lockup: TypedContractEvent<
      LockupEvent.InputTuple,
      LockupEvent.OutputTuple,
      LockupEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
