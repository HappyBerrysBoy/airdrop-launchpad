/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ChuruLaunchpadInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "PERCENT_PRECISION"
      | "amount"
      | "churu"
      | "claim"
      | "claimRatio"
      | "close"
      | "endBlock"
      | "enroll"
      | "getProgress"
      | "grantRole"
      | "hasRole"
      | "revokeRole"
      | "startBlock"
      | "updateChuruPerAce"
      | "updateLaunchpadAmount"
      | "updatePeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimRatioUpdated"
      | "Claimed"
      | "Closed"
      | "Enrolled"
      | "LaunchpadAmountUpdated"
      | "PeriodUpdated"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "churu", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enroll",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProgress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateChuruPerAce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLaunchpadAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriod",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "churu", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enroll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChuruPerAce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLaunchpadAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriod",
    data: BytesLike
  ): Result;
}

export namespace ClaimRatioUpdatedEvent {
  export type InputTuple = [claimRatio: BigNumberish];
  export type OutputTuple = [claimRatio: bigint];
  export interface OutputObject {
    claimRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClosedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnrolledEvent {
  export type InputTuple = [amount: BigNumberish, claimRatio: BigNumberish];
  export type OutputTuple = [amount: bigint, claimRatio: bigint];
  export interface OutputObject {
    amount: bigint;
    claimRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LaunchpadAmountUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeriodUpdatedEvent {
  export type InputTuple = [startBlock: BigNumberish, endBlock: BigNumberish];
  export type OutputTuple = [startBlock: bigint, endBlock: bigint];
  export interface OutputObject {
    startBlock: bigint;
    endBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, admin: string];
  export interface OutputObject {
    role: string;
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, admin: string];
  export interface OutputObject {
    role: string;
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChuruLaunchpad extends BaseContract {
  connect(runner?: ContractRunner | null): ChuruLaunchpad;
  waitForDeployment(): Promise<this>;

  interface: ChuruLaunchpadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PERCENT_PRECISION: TypedContractMethod<[], [bigint], "view">;

  amount: TypedContractMethod<[], [bigint], "view">;

  churu: TypedContractMethod<[], [string], "view">;

  claim: TypedContractMethod<[], [void], "payable">;

  claimRatio: TypedContractMethod<[], [bigint], "view">;

  close: TypedContractMethod<[], [void], "nonpayable">;

  endBlock: TypedContractMethod<[], [bigint], "view">;

  enroll: TypedContractMethod<
    [
      _amount: BigNumberish,
      _claimRatio: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getProgress: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  startBlock: TypedContractMethod<[], [bigint], "view">;

  updateChuruPerAce: TypedContractMethod<
    [_claimRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateLaunchpadAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePeriod: TypedContractMethod<
    [_startBlock: BigNumberish, _endBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "churu"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "claimRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "close"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enroll"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _claimRatio: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProgress"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateChuruPerAce"
  ): TypedContractMethod<[_claimRatio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLaunchpadAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePeriod"
  ): TypedContractMethod<
    [_startBlock: BigNumberish, _endBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimRatioUpdated"
  ): TypedContractEvent<
    ClaimRatioUpdatedEvent.InputTuple,
    ClaimRatioUpdatedEvent.OutputTuple,
    ClaimRatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Closed"
  ): TypedContractEvent<
    ClosedEvent.InputTuple,
    ClosedEvent.OutputTuple,
    ClosedEvent.OutputObject
  >;
  getEvent(
    key: "Enrolled"
  ): TypedContractEvent<
    EnrolledEvent.InputTuple,
    EnrolledEvent.OutputTuple,
    EnrolledEvent.OutputObject
  >;
  getEvent(
    key: "LaunchpadAmountUpdated"
  ): TypedContractEvent<
    LaunchpadAmountUpdatedEvent.InputTuple,
    LaunchpadAmountUpdatedEvent.OutputTuple,
    LaunchpadAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PeriodUpdated"
  ): TypedContractEvent<
    PeriodUpdatedEvent.InputTuple,
    PeriodUpdatedEvent.OutputTuple,
    PeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ClaimRatioUpdated(uint256)": TypedContractEvent<
      ClaimRatioUpdatedEvent.InputTuple,
      ClaimRatioUpdatedEvent.OutputTuple,
      ClaimRatioUpdatedEvent.OutputObject
    >;
    ClaimRatioUpdated: TypedContractEvent<
      ClaimRatioUpdatedEvent.InputTuple,
      ClaimRatioUpdatedEvent.OutputTuple,
      ClaimRatioUpdatedEvent.OutputObject
    >;

    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Closed(uint256)": TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;
    Closed: TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;

    "Enrolled(uint256,uint256)": TypedContractEvent<
      EnrolledEvent.InputTuple,
      EnrolledEvent.OutputTuple,
      EnrolledEvent.OutputObject
    >;
    Enrolled: TypedContractEvent<
      EnrolledEvent.InputTuple,
      EnrolledEvent.OutputTuple,
      EnrolledEvent.OutputObject
    >;

    "LaunchpadAmountUpdated(uint256)": TypedContractEvent<
      LaunchpadAmountUpdatedEvent.InputTuple,
      LaunchpadAmountUpdatedEvent.OutputTuple,
      LaunchpadAmountUpdatedEvent.OutputObject
    >;
    LaunchpadAmountUpdated: TypedContractEvent<
      LaunchpadAmountUpdatedEvent.InputTuple,
      LaunchpadAmountUpdatedEvent.OutputTuple,
      LaunchpadAmountUpdatedEvent.OutputObject
    >;

    "PeriodUpdated(uint64,uint64)": TypedContractEvent<
      PeriodUpdatedEvent.InputTuple,
      PeriodUpdatedEvent.OutputTuple,
      PeriodUpdatedEvent.OutputObject
    >;
    PeriodUpdated: TypedContractEvent<
      PeriodUpdatedEvent.InputTuple,
      PeriodUpdatedEvent.OutputTuple,
      PeriodUpdatedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
