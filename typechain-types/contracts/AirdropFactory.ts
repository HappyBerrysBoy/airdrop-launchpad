/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AirdropFactory {
  export type AirdropInfoStruct = {
    airdrop: AddressLike;
    token: AddressLike;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    tgePercent: BigNumberish;
    vestingCount: BigNumberish;
  };

  export type AirdropInfoStructOutput = [
    airdrop: string,
    token: string,
    startTimestamp: bigint,
    endTimestamp: bigint,
    tgePercent: bigint,
    vestingCount: bigint
  ] & {
    airdrop: string;
    token: string;
    startTimestamp: bigint;
    endTimestamp: bigint;
    tgePercent: bigint;
    vestingCount: bigint;
  };
}

export interface AirdropFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "airdropInfo"
      | "airdropLength"
      | "airdrops"
      | "createAirdrop"
      | "getAirdropByAddress"
      | "getAllAirdrops"
      | "grantRole"
      | "hasRole"
      | "revokeRole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AirdropCreated" | "RoleGranted" | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdrops",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAirdrop",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAirdrops",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airdropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airdrops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
}

export namespace AirdropCreatedEvent {
  export type InputTuple = [
    airdrop: AddressLike,
    token: AddressLike,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    airdrop: string,
    token: string,
    startTimestamp: bigint,
    endTimestamp: bigint
  ];
  export interface OutputObject {
    airdrop: string;
    token: string;
    startTimestamp: bigint;
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, admin: string];
  export interface OutputObject {
    role: string;
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, admin: string];
  export interface OutputObject {
    role: string;
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirdropFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AirdropFactory;
  waitForDeployment(): Promise<this>;

  interface: AirdropFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  airdropInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        airdrop: string;
        token: string;
        startTimestamp: bigint;
        endTimestamp: bigint;
        tgePercent: bigint;
        vestingCount: bigint;
      }
    ],
    "view"
  >;

  airdropLength: TypedContractMethod<[], [bigint], "view">;

  airdrops: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createAirdrop: TypedContractMethod<
    [
      token: AddressLike,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      tgePercent: BigNumberish,
      vestingCount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getAirdropByAddress: TypedContractMethod<
    [airdrop: AddressLike],
    [AirdropFactory.AirdropInfoStructOutput],
    "view"
  >;

  getAllAirdrops: TypedContractMethod<
    [],
    [AirdropFactory.AirdropInfoStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "airdropInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        airdrop: string;
        token: string;
        startTimestamp: bigint;
        endTimestamp: bigint;
        tgePercent: bigint;
        vestingCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "airdropLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "airdrops"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createAirdrop"
  ): TypedContractMethod<
    [
      token: AddressLike,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      tgePercent: BigNumberish,
      vestingCount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAirdropByAddress"
  ): TypedContractMethod<
    [airdrop: AddressLike],
    [AirdropFactory.AirdropInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllAirdrops"
  ): TypedContractMethod<
    [],
    [AirdropFactory.AirdropInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AirdropCreated"
  ): TypedContractEvent<
    AirdropCreatedEvent.InputTuple,
    AirdropCreatedEvent.OutputTuple,
    AirdropCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AirdropCreated(address,address,uint256,uint256)": TypedContractEvent<
      AirdropCreatedEvent.InputTuple,
      AirdropCreatedEvent.OutputTuple,
      AirdropCreatedEvent.OutputObject
    >;
    AirdropCreated: TypedContractEvent<
      AirdropCreatedEvent.InputTuple,
      AirdropCreatedEvent.OutputTuple,
      AirdropCreatedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
